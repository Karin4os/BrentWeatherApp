version: "3.9"

x-airflow-env: &airflow-env
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
  AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
  AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 8080
  AIRFLOW__WEBSERVER__WORKERS: 2
  AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
  _PIP_ADDITIONAL_REQUIREMENTS: "-r /opt/airflow/requirements.txt"

services:
  postgres:
    image: ${POSTGRES_IMAGE}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [internal]

  redis:
    image: ${REDIS_IMAGE}
    restart: always
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    networks: [internal]

  airflow-init:
    build: ./airflow
    depends_on: [postgres, redis]
    entrypoint: /bin/bash
    command: >
      -c "pip install -q -r /opt/airflow/requirements.txt && airflow db upgrade && airflow users create --role Admin --username ${AIRFLOW_ADMIN_USERNAME} --password ${AIRFLOW_ADMIN_PASSWORD} --firstname ${AIRFLOW_ADMIN_FIRSTNAME} --lastname ${AIRFLOW_ADMIN_LASTNAME} --email ${AIRFLOW_ADMIN_EMAIL} || true"
    environment: *airflow-env
    volumes:
      - ./data:/opt/airflow/data
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt
      - airflow_logs:/opt/airflow/logs
    networks: [internal]
    restart: "no"

  airflow-webserver:
    build: ./airflow
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_started }
      airflow-init: { condition: service_completed_successfully }
    environment: *airflow-env
    command: ["airflow", "webserver"]
    ports:
      - "8080:8080"   # Airflow UI exposed
    volumes:
      - ./data:/opt/airflow/data
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt
      - airflow_logs:/opt/airflow/logs
    networks: [internal]
    restart: always

  airflow-scheduler:
    build: ./airflow
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_started }
      airflow-webserver: { condition: service_started }
    environment: *airflow-env
    command: ["airflow", "scheduler"]
    volumes:
      - ./data:/opt/airflow/data
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt
      - airflow_logs:/opt/airflow/logs
    networks: [internal]
    restart: always
  
  streamlit:
    image: ${STREAMLIT_IMAGE}
    ports:
      - "8501:8501"   # Streamlit UI exposed
    volumes:
      - ./data:/app/data
    depends_on:
      - airflow-scheduler
    networks: [internal]

volumes:
  postgres_data:
  airflow_logs:

networks:
  internal:
